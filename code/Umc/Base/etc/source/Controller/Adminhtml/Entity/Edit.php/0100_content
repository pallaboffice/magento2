    /**
     * Initialize current {{EntityLabel}} and set it in the registry.
     *
     * @return int
     */
    protected function {{_}}init{{Entity}}()
    {
        ${{entity}}Id = $this->getRequest()->getParam('{{entity}}_id');
        $this->{{_}}coreRegistry->register({{class {{Namespace}}\{{Module}}\Controller\RegistryConstants}}::CURRENT_{{ENTITY}}_ID, ${{entity}}Id);

        return ${{entity}}Id;
    }

    /**
     * Edit or create {{EntityLabel}}
     *
     * @return \Magento\Backend\Model\View\Result\Page
     */
    public function execute()
    {
        ${{entity}}Id = $this->{{_}}init{{Entity}}();

        /** @var \Magento\Backend\Model\View\Result\Page $resultPage */
        $resultPage = $this->{{_}}resultPageFactory->create();
        $resultPage->setActiveMenu('{{Namespace}}_{{Module}}::{{module}}_{{entity}}');
        $resultPage->getConfig()->getTitle()->prepend(__('{{EntitiesLabelEscaped}}'));
        $resultPage->addBreadcrumb(__('{{menuText}}'), __('{{menuText}}'));
        $resultPage->addBreadcrumb(__('{{EntitiesLabelEscaped}}'), __('{{EntitiesLabelEscaped}}'), $this->getUrl('{{namespace}}_{{module}}/{{entity}}'));

        if (${{entity}}Id === null) {
            $resultPage->addBreadcrumb(__('New {{EntityLabelEscaped}}'), __('New {{EntityLabelEscaped}}'));
            $resultPage->getConfig()->getTitle()->prepend(__('New {{EntityLabelEscaped}}'));
        } else {
            $resultPage->addBreadcrumb(__('Edit {{EntityLabelEscaped}}'), __('Edit {{EntityLabelEscaped}}'));
            $resultPage->getConfig()->getTitle()->prepend(
                $this->{{_}}{{entity}}Repository->getById(${{entity}}Id)->get{{NameAttributeCode}}()
            );
        }
        return $resultPage;
    }
